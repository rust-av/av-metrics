name: ci

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  clippy-rustfmt:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Install stable
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true
        components: clippy, rustfmt

    - name: Run rustfmt
      uses: actions-rs/cargo@v1
      with:
        command: fmt
        args: -- --check --verbose

    - name: Run cargo clippy
      uses: actions-rs/clippy-check@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        args: --all-targets --all-features --tests --benches -- -D warnings

  cargo-c:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Install stable
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true

    - name: Install cargo-c
      env:
        LINK: https://github.com/lu-zero/cargo-c/releases/download
        CARGO_C_VERSION: 0.6.17
      run: |
        curl -L "$LINK/v$CARGO_C_VERSION/cargo-c-linux.tar.gz" |
        tar xz -C $HOME/.cargo/bin

    - name: Run cargo-c
      run: |
        cargo cinstall --manifest-path=av_metrics/Cargo.toml \
                       --prefix=$HOME/av_metrics_deploy

    - name: Build cargo-c tests
      run: |
        export PKG_CONFIG_PATH=$HOME/av_metrics_deploy/lib/pkgconfig
        cd av_metrics/c-example
        gcc test.c -o test `pkg-config --static --cflags --libs av_metrics`

    - name: Run tests
      run: |
        export LD_LIBRARY_PATH=$HOME/av_metrics_deploy/lib/
        cd av_metrics/c-example
        ./test

  build:

    strategy:
      matrix:
        platform: [ubuntu-latest, windows-latest]

    runs-on: ${{ matrix.platform }}

    steps:
    - uses: actions/checkout@v2

    - name: Install stable
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true

    - name: Build (y4m)
      run: cargo build --tests --benches

    - name: Run tests (y4m)
      run: cargo test

    - name: Build (ffmpeg)
      run: cargo build --all-features --tests --benches

    - name: Run tests (ffmpeg)
      run: cargo test --all-features

    - name: Generate docs
      run: cargo doc --all-features --no-deps
